app:
  jwk-set-uri: ${APP_KEYCLOAK_JWK_SET_URI:http://localhost:8081/realms/course-management-realm/protocol/openid-connect/certs}
server:
  port: 9002
  error:
    include-message: always
    include-binding-errors: always
spring:
  application:
    name: review-service
  data:
    mongodb:
      uri: mongodb://localhost:27017/review-db
      #host: localhost
      #port: 27017
      #database: review-db
  security:
    oauth2:
      resourceserver:
        jwt:
          issuer-uri: ${KEYCLOAK_ISSUER_URI:http://localhost:8081/realms/course-management-realm}
          jwk-set-uri: ${KEYCLOAK_JWK_SET_URI:http://localhost:8081/realms/course-management-realm/protocol/openid-connect/certs}
logging:
  level:
    root: INFO
    io.javatab.microservices.composite.review: DEBUG
  pattern:
    console: "%d{yyyy-MM-dd HH:mm:ss.SSS} [%thread] [%X{trace_id:-N/A}] [%X{span_id:-N/A}] %-5level %logger{36} - %msg%n"
management:
  endpoints:
    web:
      exposure:
        include: "health,info,metrics,prometheus"
  metrics:
    export:
      prometheus:
        enabled: true
    tags:
      application: ${spring.application.name}
      uri: "http_server_requests"
    endpoint:
      metrics:
        enabled: true
      prometheus:
        enabled: true
      health:
        show-details: always
    distribution:
      percentiles-histogram: # enable histogram for percentile
        http.server.requests: true
      slo:
        http.server.requests: 10ms, 50ms, 100ms, 500ms, 1s

---
app:
  jwk-set-uri: http://keycloak:8080/realms/course-management-realm/protocol/openid-connect/certs
spring:
  config:
    activate:
      on-profile: docker
  data:
    mongodb:
      uri: mongodb://mongodb:27017/review-db
  security:
    oauth2:
      resourceserver:
        jwt:
          issuer-uri: http://keycloak:8080/realms/course-management-realm
          jwk-set-uri: http://keycloak:8080/realms/course-management-realm/protocol/openid-connect/certs
server:
  port: 8080